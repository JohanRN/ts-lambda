{
  "version": 3,
  "sources": ["../../../../src/server/token.ts", "../../../../src/models/message.model.ts", "../../../../src/models/toke.model.ts"],
  "sourcesContent": ["import Message from \"../models/message.model\";\r\nimport Token from \"../models/toke.model\";\r\n\r\nexport const handler = async (event: any): Promise<any> => {\r\n  try {\r\n    const e = JSON.parse(event.body || '{}');\r\n    const paramToken = new Token(e.email, e.car_number, e.cvv, e.expiration_year, e.expiration_month).return();\r\n    console.log(event.headers.Authorization)\r\n    return {\r\n      statusCode: 200,\r\n      body: JSON.stringify(new Message(200, 'OK', []).res()),\r\n    };\r\n  } catch (error: any) {\r\n    return {\r\n      statusCode: 500,\r\n      body: JSON.stringify(new Message(500, error.message, []).res()),\r\n    };\r\n  }\r\n};", "class Message {\r\n    constructor(\r\n      public status: number,\r\n      public message: string,\r\n      public data: Array<any>\r\n    ) {\r\n      this.status = status;\r\n      this.message = message;\r\n      this.data = data;\r\n    }\r\n  \r\n    res() {\r\n      return {\r\n        status: this.status,\r\n        message: this.message,\r\n        data: this.data,\r\n      };\r\n    }\r\n  }\r\n  \r\n  export default Message;", "class Token {\r\n    constructor(\r\n        public email: string,\r\n        public car_number: string,\r\n        public cvv: string,\r\n        public expiration_year: string,\r\n        public expiration_month: string\r\n    ) {\r\n        if (!this.isValidEmail(email)) {\r\n            throw new Error('Correo es invalido');\r\n        }\r\n\r\n        if (!this.isValidCardNumber(car_number)) {\r\n            throw new Error('Numero de tarjeta  invalido');\r\n        }\r\n\r\n        if (!this.isValidCVV(cvv, car_number)) {\r\n            throw new Error('CVV invalido');\r\n        }\r\n\r\n        if (!this.isValidYear(expiration_year)) {\r\n            throw new Error('A\u00F1o de expiraci\u00F3n invalido');\r\n        }\r\n\r\n        if (!this.isValidMonth(expiration_month)) {\r\n            throw new Error('Mes de expiraci\u00F3n invalido');\r\n        }\r\n\r\n        this.email = email;\r\n        this.car_number = car_number;\r\n        this.cvv = cvv;\r\n        this.expiration_year = expiration_year;\r\n        this.expiration_month = expiration_month;\r\n    }\r\n\r\n    private isValidEmail(email: string): boolean {\r\n        const validDomains = ['gmail.com', 'hotmail.com', 'yahoo.es'];\r\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n\r\n        if (emailRegex.test(email)) {\r\n            const domain = email.split('@')[1];\r\n            return validDomains.includes(domain);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private isValidCardNumber(cardNumber: string): boolean {\r\n        return /^\\d{13,16}$/.test(cardNumber) && this.luhnCheck(cardNumber);\r\n    }\r\n\r\n    private luhnCheck(value: string): boolean {\r\n        let sum = 0;\r\n        let shouldDouble = false;\r\n        for (let i = value.length - 1; i >= 0; i--) {\r\n            let digit = parseInt(value[i]);\r\n\r\n            if (shouldDouble) {\r\n                digit *= 2;\r\n                if (digit > 9) {\r\n                    digit -= 9;\r\n                }\r\n            }\r\n\r\n            sum += digit;\r\n            shouldDouble = !shouldDouble;\r\n        }\r\n        return (sum % 10) === 0;\r\n    }\r\n\r\n    private isValidCVV(cvv: string, cardNumber: string): boolean {\r\n        return (\r\n            (/^\\d{3}$/.test(cvv) && ['Visa', 'Mastercard'].includes(this.getCardType(cardNumber))) ||\r\n            (/^\\d{4}$/.test(cvv) && this.getCardType(cardNumber) === 'Amex')\r\n        );\r\n    }\r\n\r\n    private getCardType(cardNumber: string): string {\r\n        if (/^4/.test(cardNumber)) {\r\n            return 'Visa';\r\n        } else if (/^5[1-5]/.test(cardNumber)) {\r\n            return 'Mastercard';\r\n        } else if (/^3[47]/.test(cardNumber)) {\r\n            return 'Amex';\r\n        } else {\r\n            return 'Unknown';\r\n        }\r\n    }\r\n\r\n    private isValidYear(year: string): boolean {\r\n        const currentYear = new Date().getFullYear();\r\n        const maxAllowedYear = currentYear + 5;\r\n\r\n        return /^\\d{4}$/.test(year) && parseInt(year) >= currentYear && parseInt(year) <= maxAllowedYear;\r\n    }\r\n\r\n    private isValidMonth(month: string): boolean {\r\n        return /^(0?[1-9]|1[0-2])$/.test(month);\r\n    }\r\n\r\n    return() {\r\n        return new Token(\r\n            this.email,\r\n            this.car_number,\r\n            this.cvv,\r\n            this.expiration_year,\r\n            this.expiration_month\r\n        );\r\n    }\r\n}\r\n\r\nexport default Token;"],
  "mappings": "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",
  "names": ["token_exports", "__export", "handler", "__toCommonJS", "Message", "status", "message", "data", "message_model_default", "Token", "email", "car_number", "cvv", "expiration_year", "expiration_month", "validDomains", "domain", "cardNumber", "value", "sum", "shouldDouble", "i", "digit", "year", "currentYear", "maxAllowedYear", "month", "toke_model_default", "handler", "event", "e", "paramToken", "toke_model_default", "message_model_default", "error"]
}
